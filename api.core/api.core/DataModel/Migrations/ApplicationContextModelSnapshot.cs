// <auto-generated />
using System;
using DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataModel.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataModel.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("OrganisationId");

                    b.Property<int>("Priority");

                    b.Property<DateTime>("TimeAndDateOfDecisionUtc");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("DataModel.ActionUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<decimal?>("HoursWorkedSincePreviousUpdate")
                        .HasColumnType("decimal(4,1)");

                    b.Property<int>("ResponsibleMemberId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDateTimeUtc");

                    b.Property<string>("UpdatedDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("ActionUpdate");
                });

            modelBuilder.Entity("DataModel.ArchivedMembershipRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MembershipRuleId");

                    b.Property<DateTime>("PublishedDateTimeUtc");

                    b.Property<string>("RuleStatement");

                    b.HasKey("Id");

                    b.HasIndex("MembershipRuleId");

                    b.ToTable("ArchivedMembershipRule");
                });

            modelBuilder.Entity("DataModel.Auth0User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<int?>("HumanId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("HumanId");

                    b.ToTable("Auth0User");
                });

            modelBuilder.Entity("DataModel.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0UserId");

                    b.Property<int>("ContactDetailType");

                    b.Property<int?>("HumanId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("Auth0UserId");

                    b.HasIndex("HumanId");

                    b.ToTable("ContactDetail");
                });

            modelBuilder.Entity("DataModel.DelegatedPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MemberId");

                    b.Property<int>("ShurahOrganisationPermission");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("DelegatedPermission");
                });

            modelBuilder.Entity("DataModel.Human", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("RegistrationDateTimeUtc");

                    b.HasKey("Id");

                    b.ToTable("Humans");
                });

            modelBuilder.Entity("DataModel.LeaderRecognition", b =>
                {
                    b.Property<int>("MemberId");

                    b.Property<DateTime>("LastUpdateDateTimeUtc");

                    b.Property<int>("RecognisedLeaderMemberId");

                    b.HasKey("MemberId");

                    b.HasIndex("RecognisedLeaderMemberId");

                    b.ToTable("LeaderRecognition");
                });

            modelBuilder.Entity("DataModel.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<int>("FollowerCount");

                    b.Property<int?>("HumanId");

                    b.Property<string>("Introduction")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("JoinedOnDateAndTimeUtc");

                    b.Property<DateTime>("LastDateAndTimeUtcAgreedToMembershipRules");

                    b.Property<bool>("Moderated");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("PublicName");

                    b.Property<bool>("Removed");

                    b.Property<bool>("SendNoEmailNotifications");

                    b.HasKey("Id");

                    b.HasIndex("HumanId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("DataModel.MemberAuth0User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0UserId");

                    b.Property<int>("MemberId");

                    b.Property<bool>("Suspended");

                    b.HasKey("Id");

                    b.HasIndex("Auth0UserId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberAuth0User");
                });

            modelBuilder.Entity("DataModel.MembershipApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0UserId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateAppliedUtc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("HumanId");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PublicName");

                    b.Property<string>("SupportingStatement")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("Auth0UserId");

                    b.HasIndex("HumanId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("MembershipApplication");
                });

            modelBuilder.Entity("DataModel.MembershipApplicationAcceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptanceDateTimeUtc");

                    b.Property<int>("AcceptingMemberId");

                    b.Property<int>("MembershipApplicationId");

                    b.HasKey("Id");

                    b.HasIndex("AcceptingMemberId");

                    b.HasIndex("MembershipApplicationId");

                    b.ToTable("MembershipApplicationAcceptance");
                });

            modelBuilder.Entity("DataModel.MembershipInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeInvitationsSetUtc");

                    b.Property<string>("EmailAddressList")
                        .HasMaxLength(4000);

                    b.Property<int>("InviterMemberId");

                    b.HasKey("Id");

                    b.HasIndex("InviterMemberId");

                    b.ToTable("MembershipInvitation");
                });

            modelBuilder.Entity("DataModel.MembershipRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MembershipRuleSectionId");

                    b.Property<int>("NumberOfCorrectAnswersRequired");

                    b.Property<DateTime>("PublishedDateTimeUtc");

                    b.Property<string>("RuleStatement")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Sequence");

                    b.HasKey("Id");

                    b.HasIndex("MembershipRuleSectionId");

                    b.ToTable("MembershipRule");
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(1000);

                    b.Property<bool>("Correct");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc");

                    b.Property<int>("MembershipRuleComprehensionQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("MembershipRuleComprehensionQuestionId");

                    b.ToTable("MembershipRuleComprehensionAnswer");
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdatedDateTimeUtc");

                    b.Property<int>("MembershipRuleId");

                    b.Property<string>("Question")
                        .HasMaxLength(1000);

                    b.Property<int>("RequiredCorrectAnswerMaximumTime");

                    b.HasKey("Id");

                    b.HasIndex("MembershipRuleId");

                    b.ToTable("MembershipRuleComprehensionQuestion");
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnsweredDateTimeUtc");

                    b.Property<string>("Auuth0UserId");

                    b.Property<bool>("CorrectlyAnswered");

                    b.Property<int?>("HumanId");

                    b.Property<int>("MembershipRuleComprehensionQuestionId");

                    b.Property<DateTime>("StartedDateTimeUtc");

                    b.HasKey("Id");

                    b.HasIndex("Auuth0UserId");

                    b.HasIndex("HumanId");

                    b.HasIndex("MembershipRuleComprehensionQuestionId");

                    b.ToTable("MembershipRuleComprehensionTestResult");
                });

            modelBuilder.Entity("DataModel.MembershipRuleSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PublishedDateTimeUtc");

                    b.Property<int>("Sequence");

                    b.Property<int>("ShurahBasedOrganisationId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("UniqueInOrganisationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ShurahBasedOrganisationId");

                    b.ToTable("MembershipRuleSection");
                });

            modelBuilder.Entity("DataModel.MembershipRuleSectionAcceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptedDateTimeUtc");

                    b.Property<string>("Auth0UserId");

                    b.Property<int?>("HumanId");

                    b.Property<int>("MembershipRuleSectionId");

                    b.HasKey("Id");

                    b.HasIndex("Auth0UserId");

                    b.HasIndex("HumanId");

                    b.HasIndex("MembershipRuleSectionId");

                    b.ToTable("MembershipRuleSectionAcceptance");
                });

            modelBuilder.Entity("DataModel.MembershipRuleSectionRelationship", b =>
                {
                    b.Property<int>("MembershipRuleSectionId");

                    b.Property<int>("ParentMembershipRuleSectionId");

                    b.HasKey("MembershipRuleSectionId");

                    b.HasIndex("ParentMembershipRuleSectionId");

                    b.ToTable("MembershipRuleSectionRelationship");
                });

            modelBuilder.Entity("DataModel.MembershipRuleTermDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("OrganisationId");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("MembershipRuleTermDefinition");
                });

            modelBuilder.Entity("DataModel.MembershipRuleViolationAccusation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccusedMemberId");

                    b.Property<int>("ClaimingMemberId");

                    b.Property<string>("ExplanationOfClaim")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("MembershipRuleId");

                    b.Property<DateTime>("RecordeDateTimeUtc");

                    b.Property<string>("RequestedRemedy")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("AccusedMemberId");

                    b.HasIndex("ClaimingMemberId");

                    b.HasIndex("MembershipRuleId");

                    b.ToTable("MembershipRuleViolationAccusation");
                });

            modelBuilder.Entity("DataModel.MembershipRuleViolationJudgement", b =>
                {
                    b.Property<int>("MembershipRuleViolationAccusationId");

                    b.Property<DateTime>("RecordeDateTimeUtc");

                    b.Property<string>("Remedy")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool>("RemedyCompleted");

                    b.Property<string>("RulingExplanation");

                    b.HasKey("MembershipRuleViolationAccusationId");

                    b.ToTable("MembershipRuleViolationJudgement");
                });

            modelBuilder.Entity("DataModel.OrganisationLeader", b =>
                {
                    b.Property<int>("OrganisationId");

                    b.Property<DateTime>("LastUpdateDateTimeUtc");

                    b.Property<int>("LeaderMemberId");

                    b.HasKey("OrganisationId");

                    b.HasIndex("LeaderMemberId");

                    b.ToTable("OrganisationLeader");
                });

            modelBuilder.Entity("DataModel.OrganisationRelationship", b =>
                {
                    b.Property<int>("ShurahBasedOrganisationId");

                    b.Property<int>("ParentOrganisationId");

                    b.HasKey("ShurahBasedOrganisationId");

                    b.HasIndex("ParentOrganisationId");

                    b.ToTable("OrganisationRelationship");
                });

            modelBuilder.Entity("DataModel.Prefix", b =>
                {
                    b.Property<string>("Text")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20);

                    b.HasKey("Text");

                    b.ToTable("Prefix");
                });

            modelBuilder.Entity("DataModel.PrefixUsage", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.Property<int>("WordNumber");

                    b.Property<int>("WordPartNumber");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("SurahNumber", "VerseNumber", "WordNumber", "WordPartNumber");

                    b.HasIndex("Text");

                    b.ToTable("PrefixUsage");
                });

            modelBuilder.Entity("DataModel.QuranComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0UserId");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int?>("HumanId");

                    b.Property<bool>("Published");

                    b.Property<int>("Surah");

                    b.Property<int>("Verse");

                    b.Property<int>("Word");

                    b.HasKey("Id");

                    b.HasIndex("Auth0UserId");

                    b.HasIndex("HumanId");

                    b.ToTable("QuranComment");
                });

            modelBuilder.Entity("DataModel.QuranCommentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuranCommentId");

                    b.Property<int>("Surah");

                    b.Property<int>("Verse");

                    b.Property<int>("Word");

                    b.HasKey("Id");

                    b.HasIndex("QuranCommentId");

                    b.ToTable("QuranCommentLink");
                });

            modelBuilder.Entity("DataModel.Root", b =>
                {
                    b.Property<string>("Text")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20);

                    b.HasKey("Text");

                    b.ToTable("Root");
                });

            modelBuilder.Entity("DataModel.RootUsage", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.Property<int>("WordNumber");

                    b.Property<int>("WordPartNumber");

                    b.Property<string>("RootText")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("SurahNumber", "VerseNumber", "WordNumber", "WordPartNumber");

                    b.HasIndex("RootText");

                    b.ToTable("RootUsage");
                });

            modelBuilder.Entity("DataModel.ShurahBasedOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed");

                    b.Property<bool>("CountingInProgress");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<int>("JoiningPolicy");

                    b.Property<DateTime>("LastUpdateDateTimeUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("RequiredNumbersOfAcceptingMembers");

                    b.Property<string>("UrlDomain")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ShurahBasedOrganisation");
                });

            modelBuilder.Entity("DataModel.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorMemberId");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool>("PendingModeration");

                    b.Property<bool>("Removed");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorMemberId");

                    b.ToTable("Suggestion");
                });

            modelBuilder.Entity("DataModel.SuggestionComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool?>("CommentIsSupportingSuggestion");

                    b.Property<int>("CommentingMemberId");

                    b.Property<bool>("IsCensored");

                    b.Property<DateTime>("LastUpdateDateTimeUtc");

                    b.Property<int>("SuggestionId");

                    b.HasKey("Id");

                    b.HasIndex("CommentingMemberId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("SuggestionComment");
                });

            modelBuilder.Entity("DataModel.SuggestionVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDateTimeUtc");

                    b.Property<bool?>("MemberIsSupportingSuggestion");

                    b.Property<int>("SuggestionId");

                    b.Property<int>("VoterMemberId");

                    b.Property<int?>("VotingLeaderMemberId");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("VoterMemberId");

                    b.HasIndex("VotingLeaderMemberId");

                    b.ToTable("SuggestionVote");
                });

            modelBuilder.Entity("DataModel.Surah", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("SurahNumber");

                    b.ToTable("Surah");
                });

            modelBuilder.Entity("DataModel.UserBirthLocation", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("UserBirthLocation");
                });

            modelBuilder.Entity("DataModel.UserEmail", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("Verified");

                    b.HasKey("UserId");

                    b.ToTable("UserEmail");
                });

            modelBuilder.Entity("DataModel.UserFathersFirstName", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("AgeSequence");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("UserFathersFirstName");
                });

            modelBuilder.Entity("DataModel.UserFirstName", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("UserFirstName");
                });

            modelBuilder.Entity("DataModel.UserMobilePhone", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("Verified");

                    b.HasKey("UserId");

                    b.ToTable("UserMobilePhone");
                });

            modelBuilder.Entity("DataModel.UserPhotograph", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("MimeType");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasMaxLength(500000);

                    b.HasKey("UserId");

                    b.ToTable("UserPhotograph");
                });

            modelBuilder.Entity("DataModel.Verse", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.HasKey("SurahNumber", "VerseNumber");

                    b.ToTable("Verse");
                });

            modelBuilder.Entity("DataModel.VerseTranslation", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("SurahNumber", "VerseNumber");

                    b.ToTable("VerseTranslation");
                });

            modelBuilder.Entity("DataModel.Word", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.Property<int>("WordNumber");

                    b.HasKey("SurahNumber", "VerseNumber", "WordNumber");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("DataModel.WordPart", b =>
                {
                    b.Property<int>("SurahNumber");

                    b.Property<int>("VerseNumber");

                    b.Property<int>("WordNumber");

                    b.Property<int>("WordPartNumber");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("WordPartPositionTypeCode");

                    b.Property<string>("WordPartTypeCode")
                        .HasMaxLength(10);

                    b.HasKey("SurahNumber", "VerseNumber", "WordNumber", "WordPartNumber");

                    b.HasIndex("Text");

                    b.HasIndex("WordPartPositionTypeCode");

                    b.HasIndex("WordPartTypeCode");

                    b.ToTable("WordPart");
                });

            modelBuilder.Entity("DataModel.WordPartForm", b =>
                {
                    b.Property<string>("Text")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.HasKey("Text");

                    b.ToTable("WordPartForm");
                });

            modelBuilder.Entity("DataModel.WordPartPositionType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.HasKey("Code");

                    b.ToTable("WordPartPositionType");
                });

            modelBuilder.Entity("DataModel.WordPartType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.HasKey("Code");

                    b.ToTable("WordPartType");
                });

            modelBuilder.Entity("DataModel.Action", b =>
                {
                    b.HasOne("DataModel.ShurahBasedOrganisation", "Organisation")
                        .WithMany("Actions")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.ActionUpdate", b =>
                {
                    b.HasOne("DataModel.Action", "Action")
                        .WithMany("Updates")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Member", "ResponsibleMember")
                        .WithMany("ActionUpdates")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.ArchivedMembershipRule", b =>
                {
                    b.HasOne("DataModel.MembershipRule", "MembershipRule")
                        .WithMany("ArchivedMembershipRules")
                        .HasForeignKey("MembershipRuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Auth0User", b =>
                {
                    b.HasOne("DataModel.Human")
                        .WithMany("Logins")
                        .HasForeignKey("HumanId");
                });

            modelBuilder.Entity("DataModel.ContactDetail", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("ContactDetails")
                        .HasForeignKey("Auth0UserId");

                    b.HasOne("DataModel.Human")
                        .WithMany("ContactDetails")
                        .HasForeignKey("HumanId");
                });

            modelBuilder.Entity("DataModel.DelegatedPermission", b =>
                {
                    b.HasOne("DataModel.Member", "Member")
                        .WithMany("DelegatedPermissions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.LeaderRecognition", b =>
                {
                    b.HasOne("DataModel.Member", "Member")
                        .WithOne("LeaderRecognition")
                        .HasForeignKey("DataModel.LeaderRecognition", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Member", "RecognisedLeaderMember")
                        .WithMany("Followers")
                        .HasForeignKey("RecognisedLeaderMemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.Member", b =>
                {
                    b.HasOne("DataModel.Human")
                        .WithMany("Memberships")
                        .HasForeignKey("HumanId");

                    b.HasOne("DataModel.ShurahBasedOrganisation", "Organisation")
                        .WithMany("Members")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MemberAuth0User", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("MemberAuth0Users")
                        .HasForeignKey("Auth0UserId");

                    b.HasOne("DataModel.Member", "Member")
                        .WithMany("MemberAuth0Users")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipApplication", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("MembershipApplications")
                        .HasForeignKey("Auth0UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Human")
                        .WithMany("MembershipApplications")
                        .HasForeignKey("HumanId");

                    b.HasOne("DataModel.ShurahBasedOrganisation", "Organisation")
                        .WithMany("MembershipApplications")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipApplicationAcceptance", b =>
                {
                    b.HasOne("DataModel.Member", "AcceptingMember")
                        .WithMany("MemberAcceptances")
                        .HasForeignKey("AcceptingMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.MembershipApplication", "MembershipApplication")
                        .WithMany("Acceptances")
                        .HasForeignKey("MembershipApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.MembershipInvitation", b =>
                {
                    b.HasOne("DataModel.Member", "InviterMember")
                        .WithMany("Invitations")
                        .HasForeignKey("InviterMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRule", b =>
                {
                    b.HasOne("DataModel.MembershipRuleSection", "MembershipRuleSection")
                        .WithMany("MembershipRules")
                        .HasForeignKey("MembershipRuleSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionAnswer", b =>
                {
                    b.HasOne("DataModel.MembershipRuleComprehensionQuestion", "MembershipRuleComprehensionQuestion")
                        .WithMany("MembershipRuleComprehensionAnswers")
                        .HasForeignKey("MembershipRuleComprehensionQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionQuestion", b =>
                {
                    b.HasOne("DataModel.MembershipRule", "MembershipRule")
                        .WithMany("MembershipRuleComprehensionQuestions")
                        .HasForeignKey("MembershipRuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleComprehensionTestResult", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("MembershipRuleComprehensionTestResults")
                        .HasForeignKey("Auuth0UserId");

                    b.HasOne("DataModel.Human")
                        .WithMany("MembershipRuleComprehensionTestResults")
                        .HasForeignKey("HumanId");

                    b.HasOne("DataModel.MembershipRuleComprehensionQuestion", "MembershipRuleComprehensionQuestion")
                        .WithMany("MembershipRuleComprehensionTestResults")
                        .HasForeignKey("MembershipRuleComprehensionQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleSection", b =>
                {
                    b.HasOne("DataModel.ShurahBasedOrganisation", "ShurahBasedOrganisation")
                        .WithMany("MembershipRuleSections")
                        .HasForeignKey("ShurahBasedOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleSectionAcceptance", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("MembershipRuleSectionAcceptances")
                        .HasForeignKey("Auth0UserId");

                    b.HasOne("DataModel.Human")
                        .WithMany("MembershipRuleSectionAcceptances")
                        .HasForeignKey("HumanId");

                    b.HasOne("DataModel.MembershipRuleSection", "MembershipRuleSection")
                        .WithMany("MembershipRuleSectionAcceptances")
                        .HasForeignKey("MembershipRuleSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleSectionRelationship", b =>
                {
                    b.HasOne("DataModel.MembershipRuleSection", "MembershipRuleSection")
                        .WithOne("ParentMembershipRuleSection")
                        .HasForeignKey("DataModel.MembershipRuleSectionRelationship", "MembershipRuleSectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.MembershipRuleSection", "ParentMembershipRuleSection")
                        .WithMany("ChildMembershipRuleSections")
                        .HasForeignKey("ParentMembershipRuleSectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.MembershipRuleTermDefinition", b =>
                {
                    b.HasOne("DataModel.ShurahBasedOrganisation", "Organisation")
                        .WithMany("Terms")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.MembershipRuleViolationAccusation", b =>
                {
                    b.HasOne("DataModel.Member", "AccusedMember")
                        .WithMany("ReceivedMembershipRuleViolationAccusations")
                        .HasForeignKey("AccusedMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Member", "ClaimingMember")
                        .WithMany("MadeMembershipRuleViolationAccusations")
                        .HasForeignKey("ClaimingMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.MembershipRule", "MembershipRule")
                        .WithMany("MembershipRuleViolationClaims")
                        .HasForeignKey("MembershipRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.MembershipRuleViolationJudgement", b =>
                {
                    b.HasOne("DataModel.MembershipRuleViolationAccusation", "MembershipRuleViolationAccusation")
                        .WithOne("Judgement")
                        .HasForeignKey("DataModel.MembershipRuleViolationJudgement", "MembershipRuleViolationAccusationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.OrganisationLeader", b =>
                {
                    b.HasOne("DataModel.Member", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.ShurahBasedOrganisation", "Organisation")
                        .WithOne("OrganisationLeader")
                        .HasForeignKey("DataModel.OrganisationLeader", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.OrganisationRelationship", b =>
                {
                    b.HasOne("DataModel.ShurahBasedOrganisation", "ParentOrganisation")
                        .WithMany("ChildOrganisationRelationships")
                        .HasForeignKey("ParentOrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.ShurahBasedOrganisation", "ShurahBasedOrganisation")
                        .WithOne("ParentOrganisationRelationship")
                        .HasForeignKey("DataModel.OrganisationRelationship", "ShurahBasedOrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.PrefixUsage", b =>
                {
                    b.HasOne("DataModel.Surah", "Surah")
                        .WithMany()
                        .HasForeignKey("SurahNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Prefix", "Prefix")
                        .WithMany("PrefixUsages")
                        .HasForeignKey("Text")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Verse", "Verse")
                        .WithMany()
                        .HasForeignKey("SurahNumber", "VerseNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Word", "Word")
                        .WithMany()
                        .HasForeignKey("SurahNumber", "VerseNumber", "WordNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.WordPart", "WordPart")
                        .WithOne("PrefixUsage")
                        .HasForeignKey("DataModel.PrefixUsage", "SurahNumber", "VerseNumber", "WordNumber", "WordPartNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.QuranComment", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithMany("QuranComments")
                        .HasForeignKey("Auth0UserId");

                    b.HasOne("DataModel.Human")
                        .WithMany("QuranComments")
                        .HasForeignKey("HumanId");
                });

            modelBuilder.Entity("DataModel.QuranCommentLink", b =>
                {
                    b.HasOne("DataModel.QuranComment", "QuranComment")
                        .WithMany("CommentLinks")
                        .HasForeignKey("QuranCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.RootUsage", b =>
                {
                    b.HasOne("DataModel.Root", "Root")
                        .WithMany("RootUsages")
                        .HasForeignKey("RootText")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Surah", "Surah")
                        .WithMany()
                        .HasForeignKey("SurahNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Verse", "Verse")
                        .WithMany()
                        .HasForeignKey("SurahNumber", "VerseNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Word", "Word")
                        .WithMany()
                        .HasForeignKey("SurahNumber", "VerseNumber", "WordNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.WordPart", "WordPart")
                        .WithOne("RootUsage")
                        .HasForeignKey("DataModel.RootUsage", "SurahNumber", "VerseNumber", "WordNumber", "WordPartNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Suggestion", b =>
                {
                    b.HasOne("DataModel.Member", "AuthorMember")
                        .WithMany("Suggestions")
                        .HasForeignKey("AuthorMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.SuggestionComment", b =>
                {
                    b.HasOne("DataModel.Member", "CommentingMember")
                        .WithMany("SuggestionComments")
                        .HasForeignKey("CommentingMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Suggestion", "Suggestion")
                        .WithMany("Comments")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.SuggestionVote", b =>
                {
                    b.HasOne("DataModel.Suggestion", "Suggestion")
                        .WithMany("Votes")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Member", "VoterMember")
                        .WithMany("SuggestionVotes")
                        .HasForeignKey("VoterMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Member", "VotingLeaderMember")
                        .WithMany("SuggestionFollowerVotes")
                        .HasForeignKey("VotingLeaderMemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.UserBirthLocation", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("BirthLocation")
                        .HasForeignKey("DataModel.UserBirthLocation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.UserEmail", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("Email")
                        .HasForeignKey("DataModel.UserEmail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.UserFathersFirstName", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("FathersName")
                        .HasForeignKey("DataModel.UserFathersFirstName", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.UserFirstName", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("FirstName")
                        .HasForeignKey("DataModel.UserFirstName", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.UserMobilePhone", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("MobilePhone")
                        .HasForeignKey("DataModel.UserMobilePhone", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.UserPhotograph", b =>
                {
                    b.HasOne("DataModel.Auth0User", "Auth0User")
                        .WithOne("Photograph")
                        .HasForeignKey("DataModel.UserPhotograph", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Verse", b =>
                {
                    b.HasOne("DataModel.Surah", "Surah")
                        .WithMany("Verses")
                        .HasForeignKey("SurahNumber")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.VerseTranslation", b =>
                {
                    b.HasOne("DataModel.Verse", "Verse")
                        .WithOne("Translation")
                        .HasForeignKey("DataModel.VerseTranslation", "SurahNumber", "VerseNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.Word", b =>
                {
                    b.HasOne("DataModel.Surah", "Surah")
                        .WithMany("Words")
                        .HasForeignKey("SurahNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Verse", "Verse")
                        .WithMany("Words")
                        .HasForeignKey("SurahNumber", "VerseNumber")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModel.WordPart", b =>
                {
                    b.HasOne("DataModel.Surah", "Surah")
                        .WithMany("WordParts")
                        .HasForeignKey("SurahNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.WordPartForm", "WordPartForm")
                        .WithMany("WordParts")
                        .HasForeignKey("Text")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.WordPartPositionType", "WordPartPositionType")
                        .WithMany("WordParts")
                        .HasForeignKey("WordPartPositionTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.WordPartType", "WordPartType")
                        .WithMany("WordParts")
                        .HasForeignKey("WordPartTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Verse", "Verse")
                        .WithMany("WordParts")
                        .HasForeignKey("SurahNumber", "VerseNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModel.Word", "Word")
                        .WithMany("WordParts")
                        .HasForeignKey("SurahNumber", "VerseNumber", "WordNumber")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
